version: '3.8'

services:
  authentication:
    build: 
      context: ./authentication
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    networks:
      - prestashop-network
    env_file: .env
    secrets:
      - db_password
    depends_on:
      - db
    volumes:
      - ./logs/authentication:/app/logs  # Montage du volume pour les logs d'authentification
    restart: unless-stopped

  # products:
  #   build: 
  #     context: ./products
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5001"
  #   networks:
  #     - prestashop-network
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SQLALCHEMY_DATABASE_URI: ${SQLALCHEMY_DATABASE_URI}
  #   depends_on:
  #     - db
  #   volumes:
  #     - products-logs:/var/log/products  # Montage du volume pour les logs de produits
  #   restart: unless-stopped

  # reviews:
  #   build: 
  #     context: ./reviews
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5002:5002"
  #   networks:
  #     - prestashop-network
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SQLALCHEMY_DATABASE_URI: ${SQLALCHEMY_DATABASE_URI}
  #   depends_on:
  #     - db
  #   volumes:
  #     - reviews-logs:/var/log/reviews  # Montage du volume pour les logs de revues
  #   restart: unless-stopped

  db:
    image: mariadb:10.5
    # healthcheck:
    #   test: ["CMD", "mysqladmin", "ping", "-uroot", "-p$${MYSQL_ROOT_PASSWORD}"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    env_file: db.env
      # MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      # MYSQL_DATABASE: ${MYSQL_DATABASE}
      # MYSQL_USER: ${MYSQL_USER}
      # MYSQL_PASSWORD_FILE: /run/secrets/db_password
    # secrets:
    #   - db_password
    #   - mysql_root_password
    networks:
      - prestashop-network
    volumes:
      - db-data:/var/lib/mysql  # Montage du volume pour les données de la base de données
    # command: 
    #   - bash
    #   - "-c"
    #   - |
    #     set -e
    #     (echo "CREATE DATABASE IF NOT EXISTS prestashop_db; CREATE USER IF NOT EXISTS 'user123'@'%' IDENTIFIED BY 'pass123'; GRANT ALL PRIVILEGES ON prestashop_db.* TO 'user123'@'%'; FLUSH PRIVILEGES;" | mysql -uroot -p"$$MYSQL_ROOT_PASSWORD") &
    #     docker-entrypoint.sh mysqld
    restart: unless-stopped

  # prestashop-api:
  #   image: prestashop/prestashop:latest
  #   ports:
  #     - "80:80"
  #   networks:
  #     - prestashop-network
  #   environment:
  #     DB_SERVER: db
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${MYSQL_USER}
  #     DB_PASSWD_FILE: /run/secrets/db_password
  #     PS_FOLDER_ADMIN: ${PS_FOLDER_ADMIN}
  #     PS_FOLDER_INSTALL: ${PS_FOLDER_INSTALL}
  #     PS_INSTALL_AUTO: ${PS_INSTALL_AUTO}
  #     PS_DOMAIN: ${PS_DOMAIN}
  #     ADMIN_MAIL: ${ADMIN_MAIL}
  #     ADMIN_PASSWD: ${ADMIN_PASSWD}
  #   secrets:
  #     - db_password
  #   depends_on:
  #     - db
  #   volumes:
  #     - prestashop-logs:/var/log/prestashop  # Montage du volume pour les logs de PrestaShop
  #   restart: unless-stopped

  # zabbix-web:
  #   depends_on:
  #     - db
  #     - zabbix-server
  #   image: zabbix/zabbix-web-apache-mysql:latest
  #   user: root
  #   ports:
  #     - "8081:80"
  #   networks:
  #     - prestashop-network
  #   environment:
  #     DB_SERVER_HOST: db
  #     MYSQL_DATABASE: zabbix
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #     ZBX_SERVER_HOST: zabbix-server
  #   command: 
  #     - /bin/bash
  #     - -c
  #     - |
  #       if [ ! -d /etc/httpd/conf ]; then
  #         mkdir -p /etc/httpd/conf
  #       fi
  #       if [ ! -f /etc/httpd/conf/httpd.conf ]; then
  #         echo "ServerName localhost" > /etc/httpd/conf/httpd.conf
  #       fi
  #       exec /usr/sbin/httpd -D FOREGROUND
  #   volumes:
  #     - zabbix-web-logs:/var/log/zabbix  # Montage du volume pour les logs de Zabbix Web
  #   restart: unless-stopped

  # zabbix-server:
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   image: zabbix/zabbix-server-mysql:latest
  #   user: root
  #   ports:
  #     - "10051:10051"
  #   networks:
  #     - prestashop-network
  #   environment:
  #     DB_SERVER_HOST: db
  #     MYSQL_DATABASE: zabbix
  #     MYSQL_USER: user123
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   volumes:
  #     - ./zabbix/config/zabbix_server.conf:/etc/zabbix/zabbix_server.conf  # Montage du volume pour le fichier de configuration du serveur Zabbix
  #     - zabbix-server-logs:/var/log/zabbix  # Montage du volume pour les logs du serveur Zabbix
  #   command: > 
  #     bash -c "
  #     mkdir -m 777 -p /var/log/zabbix && 
  #     mkdir -m 777 -p /var/run/zabbix && 
  #     chown -R zabbix:zabbix /var/log/zabbix && 
  #     chown -R zabbix:zabbix /var/run/zabbix && 
  #     exec /usr/sbin/zabbix_server -f -c /etc/zabbix/zabbix_server.conf
  #     "
  #   restart: unless-stopped

  # zabbix-agent:
  #   image: zabbix/zabbix-agent:latest
  #   user: root
  #   networks:
  #     - prestashop-network
  #   environment:
  #     ZBX_SERVER_HOST: zabbix-server
  #     ZBX_HOSTNAME: zabbix-agent
  #   volumes:
  #     - zabbix-agent-logs:/var/log/zabbix  # Montage du volume pour les logs de l'agent Zabbix
  #   command: > 
  #     bash -c "
  #     mkdir -m 777 -p /var/log/zabbix && 
  #     mkdir -m 777 -p /var/run/zabbix && 
  #     chown -R zabbix:zabbix /var/log/zabbix && 
  #     chown -R zabbix:zabbix /var/run/zabbix && 
  #     exec /usr/sbin/zabbix_agentd -f
  #     "
  #   restart: unless-stopped

networks:
  prestashop-network:
    driver: bridge

volumes:
  db-data:
  products-logs:
  reviews-logs:
  prestashop-logs:
  zabbix-web-logs:
  zabbix-server-logs:
  zabbix-agent-logs:

secrets:
  db_password:
    file: ./secrets/db_password.txt
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
